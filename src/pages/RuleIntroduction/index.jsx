import React, {Component} from 'react';
import "./index.css";
import Background from "../../components/Background";


class RuleIntroduction extends Component {
  render() {
    return (
        <div className="rulePage">
          <main>
            <h1>天梯模式规则介绍</h1>
            <hr/>
            <div className="mood">
              <h2>普通模式</h2>
              <img className="moodImg" src={require("../../components/MoodItem/img/普通模式.png")} alt="图片加载失败"/>
              <p>双方匹配完成之后共同做一道题，一旦其中一个用户提交并测试通过就会获得胜利。</p>
              <p>在本项目中，限制玩家的错误次数，玩家错误次数超过5次就直接失败。</p>
              <p>为了增加对局的交互性和刺激程度，对局双方的玩家会看到互相的进度，具体表现为：</p>
              <ol className="my-list">
                <li>当有一个玩家提交时，提交的玩家会第一时间显示自己提交的语言，提交是否通过。</li>
                <li>对局双方的代码两会每秒实时更行，双方能够看到对方的代码量是多少。</li>
                <li>对局双方的生命值，即错误剩余次数相互公开且实时更新。</li>
                <li>对局双方能够看到对方代码框中的编辑位置，通常在玩家拿到题之后会先思考一段时间再开始写代码，有了这样的功能，双方就能够知道对方是否已经思考完毕，开始进入编写代码的阶段。</li>
                <li>在多题模式中，双方切换当前正在看的题目的动作是公开的，双方能够看到对方当前正在看哪一道题目。</li>
              </ol>
            </div>
            <div className="mood">
              <h2>极限模式</h2>
              <img className="moodImg" src={require("../../components/MoodItem/img/极限模式.png")} alt="图片加载失败"/>
              <p>此模式和普通模式几乎一样，只是生命值改为了1</p>
            </div>
            <div className="mood">
              <h2>多题模式</h2>
              <img className="moodImg" src={require("../../components/MoodItem/img/多题模式.png")} alt="图片加载失败"/>
              <p>此模式是在普通模式的基础之上，把题目的数量给改成了五道题，五道题都率先通过的那一个人获得比赛的胜利</p>
            </div>
            <div className="mood">
              <h2>多题极限模式</h2>
              <img className="moodImg" src={require("../../components/MoodItem/img/多题极限模式.png")} alt="图片加载失败"/>
              <p>此模式是在多题模式的基础之上把生命值改为了1，只要有任何一道题出了错，那这个人就废了</p>
            </div>

            <h1>娱乐模式规则介绍</h1>
            <hr/>
            <div className="mood">
              <h2>打字对决</h2>
              <img className="moodImg" src={require("../../components/MoodItem/img/打字对决.png")} alt="图片加载失败"/>
              <p>该模式是一个双人共同打字对决游戏，规则是两位玩家在规定的两分钟内打完一篇文章，打完的先后顺序是以正确输入的字符数量为基准进行判定。此模式旨在帮助用户提高打字速度，并提供一个双人共同打字的对比平台，方便用户了解自己的水平。由于此模式不需要进行算法思考，所以被定位为休闲模式，对局结束不会对用户分数造成影响。</p>
            </div>

            <div className="mood">
              <h2>井字棋脚本对决</h2>
              <img className="moodImg" src={require("../../components/MoodItem/img/井字棋脚本擂台.png")} alt="图片加载失败"/>
              <p>井字棋脚本擂台是一种小游戏模式，要求参与者设计算法来决定最佳的下棋策略。参与者需要编写一个脚本程序，将其提交到服务器上，服务器会将用户提交的与榜上前十名代码，按照倒序逐个pk，并将用户的代码插入榜上，淘汰第十名用户的代码。这个小游戏模式可以提供一些学习算法的机会，因为它需要参与者不断地优化自己的代码以在比赛中获胜，从而提高自己的算法设计能力和编程技能。</p>
            </div>

            <div className="mood">
              <h2>五子棋脚本对决</h2>
              <img className="moodImg" src={require("../../components/MoodItem/img/五子棋脚本对决.png")} alt="图片加载失败"/>
              <p>五子棋脚本对决是另一种小游戏模式，要求参与者编写脚本程序，提交到服务器上进行对抗。这个小游戏模式不再设置排行榜，每个用户都可以将自己的独立代码提交到服务器上。界面会显示提交者的姓名和代码量。来到该页面的用户可以随意挑选其他用户，并将自己的代码与挑选的对手的代码进行对抗，并查看对抗的结果。由于五子棋需要的计算量比井字棋高很多，因此这个小游戏可以提供更高级的挑战，帮助参与者学习更多的算法和编程技巧。</p>
            </div>

            <div className="mood">
              <h2>机械自走棋</h2>
              <img className="moodImg" src={require("../../components/MoodItem/img/机械自走棋.png")} alt="图片加载失败"/>
              <p>玩家需要编写代码来控制机器人在棋盘上进行移动、放置棋子和扔炸弹三种操作。每个操作都有对应的方向，如向上下左右等。</p>
              <p>机器人的移动会受到棋盘上障碍物以及自己所放置的棋子的阻碍而不能移动，因此用户在编写放置棋子的逻辑代码时需要考虑把路挡住的情况。</p>
              <p>下图中，该机器人在自身的上下左右位置都放置了棋子，导致自己无路可走。</p>
              <img src="https://www.helloimg.com/images/2023/05/07/oxayYu.png" alt="oxayYu.png" border="0"/>

              <p>为了以防用户在棋盘上的机器人被无路可走的情况，该模式为机器人提供了“扔炸弹”的操作，在机器人扔出炸弹后，机器人所面对的方向上会产生一个3x3范围的爆炸并立刻清理掉这个范围上所有的障碍物，包括自己和对方所放置的棋子。如果在这个范围中有对方的机器人，那么我方将会因为摧毁了对方的机器人而立刻获得游戏的胜利。</p>
              <p>下图为机器人向四个方向扔炸弹时所产生的爆炸区域范围，由于炸弹是扔出后立刻爆炸并且区域不会覆盖自己的当前位置，所以玩家不需要考虑炸弹把自己摧毁的情况。</p>
              <a href="https://www.helloimg.com/image/ox1Bev"><img
                  src="https://www.helloimg.com/images/2023/05/07/ox1Bev.png" alt="ox1Bev.png" border="0"/></a>
              <p>扔炸弹的机制为此模式提供了更多的策略和可能性，例如：</p>
              <ol className="my-list">
                <li>追击策略：用户可以考虑设计一个专门用于追击对方机器人并将其摧毁的激进的策略。</li>
                <li>保守策略：选取迅速放置棋子并尽可能逃离对方追击的保守的策略。</li>
                <li>围困策略：用户通过设计一个巧妙的边移动边下棋的策略，在对方炸弹数量耗尽的情况下，逐渐缩减对手的行动区域，将其困在很小一个区域内，然后自己再剩下的大片空间中填满棋子，取得游戏的胜利。</li>

              </ol>
              <p>用户还可以结合以上多种策略，根据游戏开局的地形条件、当前的回合数、自己所处的棋盘位置、自己当前的剩余炸弹数量来实现策略的及时切换。</p>
              <p>最终在一定数量的回合后，放置棋子多的一方获得胜利。</p>
              <p>游戏开始时系统会自动交替执行两个玩家编写的代码逻辑，玩家可以通过拖动滑动条查看整个对局的详细过程。</p>
              <p>为了增加游戏的真实性和难度，玩家在选择好出生点后，只能获得以机器人为中心，以两个格子为半径的5x5范围的机器人视野。玩家只能通过机器人视野中所看到的情况来写机器人决策代码。</p>
              <img src="https://www.helloimg.com/images/2023/05/07/ox11tP.png" alt="xxx" border="0"/>
              <p>上图是一个我方机器人看到的视野矩阵所表示的数据数组，此时我方为放置白色棋子的后手，对手为放置黑色棋子的先手。矩阵中的数字示意如下：</p>
              <ul>
                <li>-1：超出棋盘的禁区</li>
                <li>0：棋盘上的空地</li>
                <li>1：棋盘上的石头、障碍物</li>
                <li>2：先手方机器人的身体</li>
                <li>3：后手方机器人的身体</li>
                <li>4：先手方机器人放置的黑色棋子</li>
                <li>5：后手方机器人放置的白色棋子</li>
              </ul>
              <p>在这个5x5的矩阵中，最中心的位置一定为2或3。</p>
              <p>相较于传统的井字棋和五子棋游戏，该模式具有更高的趣味性，同时对玩家的算法综合能力要求较高。游戏中需要涉及到多方面的知识点，包括但不限于二维数组、搜索、回溯等。甚至，玩家可以尝试使用JavaScript来实现神经网络，参与与其他玩家的对决。</p>
            </div>


            <hr/>
            <p>如果您还有疑惑，可以加入我们的官方qq群：625570274</p>
          </main>
          <Background/>
        </div>
    );
  }
}

export default RuleIntroduction;
